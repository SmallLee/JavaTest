1.查看java字节码的命令
javap -verbose
2.类的加载机制
    I.加载(loadClass--findClass--根据名称文件存入字节数组--defineClass--返回class对象)
    II.连接(验证-准备-解析)
        验证：
            将已经读入到内存类的二进制数据合并到虚拟机运行时环境中去，文件结构检查以及字节码验证
        准备
            为静态变量分配内存并赋初始化值
        解析
             将符号引用转化为直接地址引用过程
    III:初始化
        有父类
            父类静态属性
            父类静态代码块
            子类静态属性
            子类静态代码块
            父类非静态属性
            父类非静态代码块
            父类构造方法
            子类非静态属性
            子类费静态代码块
            子类构造函数
         没有父类
            静态属性
            静态代码块
            非静态属性
            非静态代码块
            构造方法
 3.类加载器
    BootStrapClassLoader(加载jre/lib/rt.jar)
    ExtClassloader(加载jre/lib/ext/*.jar)
    AppClassloader(加载classpath下的jar)

  4.jdk安装完为什么会有两个JRE?
    是为了分担工作，开发时执行的是jdk中的jre，
    运行java程序时执行的是外部的jre
    这两个jre的区别：jdk中的jre多了一个server vm,server vm启动时间较长，占用内存多
    ，但是启动后执行性能更高，适合开发

  5.为什么要双亲委派机制
    防止类加载混乱，引起异常

  6. this.getClass().getResourceAsStream();
    路径以/开头。是从classpath下加载，不以/开头是从类所在的包下加载

     this.getClass().getClassLoader().getResourceAsStream()
     默认是从classpath下加载文件，路径不能以/开头

   7.java中路径写法
        斜杠和反斜杠都可以用，下面两个效果相同
        file1 = new FileReader(new File("C:/Users/Administrator/Desktop/55.txt"));
        file1 = new FileReader(new File("C:\\Users\\Administrator\\Desktop\\55.txt"));
        java中的路径一般用/
        windows中为\
        linux中为/
    8.结束JVM进程的几种方式
        I.执行System.exit();
        II.程序正常结束
        III.程序抛出异常，一直向上抛出没处理
        III.操作系统异常，导致JVM退出
    9.静态变量初始化规则
        I.按照声明的顺序依次声明并设置为该类型的默认值，但不赋值为初始化的值
        II.声明完毕后，再按声明的顺序依次设置为初始化的值，如果没有初始化的值就跳过

